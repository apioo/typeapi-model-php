{"typehub/typeapi":{"operations":[],"definitions":{"Argument":{"description":"","type":"object","properties":{"in":{"description":"The location where the value can be found either in the path, query, header or body. If you choose path, then your path must have a fitting variable path fragment","type":"string"},"schema":{"description":"","oneOf":[{"$ref":"typeschema:BooleanType"},{"$ref":"typeschema:NumberType"},{"$ref":"typeschema:IntegerType"},{"$ref":"typeschema:StringType"},{"$ref":"typeschema:ReferenceType"}]},"contentType":{"description":"In case the data is not a JSON payload which you can describe with a schema you can select a content type","type":"string"},"name":{"description":"Optional the actual path, query or header name. If not provided the key of the argument map is used","type":"string"}}},"Operation":{"description":"","type":"object","properties":{"method":{"description":"The HTTP method which is associated with this operation, must be a valid HTTP method i.e. GET, POST, PUT etc.","type":"string"},"path":{"description":"The HTTP path which is associated with this operation. A path can also include variable path fragments i.e. /my/path/:year then you can map the variable year path fragment to a specific argument","type":"string"},"return":{"description":"The return type of this operation. The return has also an assigned HTTP success status code which is by default 200","$ref":"Response"},"arguments":{"description":"All arguments provided to this operation. Each argument is mapped to a location from the HTTP request i.e. query or body","type":"object","additionalProperties":{"$ref":"Argument"}},"throws":{"description":"All exceptional states which can occur in case the operation fails. Each exception is assigned to an HTTP error status code","type":"array","items":{"$ref":"Response"}},"description":{"description":"A short description of this operation. The generated code will include this description at the method so it is recommend to use simple alphanumeric characters and no new lines","type":"string"},"stability":{"description":"Indicates the stability of this operation. This is based on the stability index from the nodejs project: 0 - Deprecated, 1 - Experimental, 2 - Stable, 3 - Legacy. If not explicit provided the operation is by default experimental.","type":"integer"},"security":{"description":"An array of scopes which are required to access this operation","type":"array","items":{"type":"string"}},"authorization":{"description":"Indicates whether this operation needs authorization, if set to false the client will not send an authorization header, default it is true","type":"boolean"},"tags":{"description":"Optional an array of tags to group operations","type":"array","items":{"type":"string"}}}},"Response":{"description":"","type":"object","properties":{"code":{"description":"The associated HTTP response code. For error responses it is possible to use the 499, 599 or 999 status code to catch all errors","type":"integer"},"schema":{"description":"","$ref":"typeschema:ReferenceType"},"contentType":{"description":"In case the data is not a JSON payload which you can describe with a schema you can select a content type","type":"string"}}},"Security":{"description":"","type":"object","properties":{"type":{"description":"The global security type of the API must be one of: httpBasic, httpBearer, apiKey or oauth2","type":"string"},"name":{"description":"Relevant for type \"apiKey\", the name of the header or query parameter i.e. \"X-Api-Key\"","type":"string"},"in":{"description":"Relevant for type \"apiKey\", must be either \"header\" or \"query\"","type":"string"},"tokenUrl":{"description":"Relevant for type \"oauth2\", the OAuth2 token endpoint","type":"string"},"authorizationUrl":{"description":"Relevant for type \"oauth2\", optional the OAuth2 authorization endpoint","type":"string"},"scopes":{"description":"Relevant for type \"oauth2\", optional OAuth2 scopes","type":"array","items":{"type":"string"}}}},"TypeApi":{"description":"The TypeApi Root","$extends":"typeschema:TypeSchema","type":"object","properties":{"baseUrl":{"description":"Optional the base url of the service, if provided the user does not need to provide a base url for your client","type":"string"},"security":{"description":"Describes the authorization mechanism which is used by your API","$ref":"Security"},"operations":{"description":"A map of operations which are provided by the API. The key of the operation should be separated by a dot to group operations into logical units i.e. product.getAll or enterprise.product.execute","type":"object","additionalProperties":{"$ref":"Operation"}}}},"typeschema:AnyType":{"description":"Represents an any type","$extends":"typeschema:CommonType","type":"object","properties":{"type":{"description":"","type":"string"}}},"typeschema:ArrayType":{"description":"Represents an array type. An array type contains an ordered list of a specific type","$extends":"typeschema:CommonType","type":"object","properties":{"type":{"description":"","type":"string"},"items":{"description":"","oneOf":[{"$ref":"typeschema:BooleanType"},{"$ref":"typeschema:NumberType"},{"$ref":"typeschema:IntegerType"},{"$ref":"typeschema:StringType"},{"$ref":"typeschema:AnyType"},{"$ref":"typeschema:ReferenceType"},{"$ref":"typeschema:GenericType"}]},"maxItems":{"description":"Positive integer value","type":"integer"},"minItems":{"description":"Positive integer value","type":"integer"}}},"typeschema:BooleanType":{"description":"Represents a boolean type","$extends":"typeschema:ScalarType","type":"object","properties":{"type":{"description":"","type":"string"}}},"typeschema:CommonType":{"description":"Represents a base type. Every type extends from this common type and shares the defined properties","type":"object","properties":{"description":{"description":"General description of this type, should not contain any new lines.","type":"string"},"type":{"description":"Type of the property","type":"string"},"nullable":{"description":"Indicates whether it is possible to use a null value","type":"boolean"},"deprecated":{"description":"Indicates whether this type is deprecated","type":"boolean"},"readonly":{"description":"Indicates whether this type is readonly","type":"boolean"}}},"typeschema:Discriminator":{"description":"Adds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description","type":"object","properties":{"propertyName":{"description":"The name of the property in the payload that will hold the discriminator value","type":"string"},"mapping":{"description":"An object to hold mappings between payload values and schema names or references","type":"object","additionalProperties":{"type":"string"}}}},"typeschema:GenericType":{"description":"Represents a generic type. A generic type can be used i.e. at a map or array which then can be replaced on reference via the $template keyword","type":"object","properties":{"$generic":{"description":"","type":"string"}}},"typeschema:IntegerType":{"description":"Represents an integer type","$extends":"typeschema:NumberType","type":"object","properties":{"type":{"description":"","type":"string"}}},"typeschema:IntersectionType":{"description":"Represents an intersection type","type":"object","properties":{"description":{"description":"","type":"string"},"allOf":{"description":"Contains an array of references. The reference must only point to a struct type","type":"array","items":{"$ref":"typeschema:ReferenceType"}}}},"typeschema:MapType":{"description":"Represents a map type. A map type contains variable key value entries of a specific type","$extends":"typeschema:CommonType","type":"object","properties":{"type":{"description":"","type":"string"},"additionalProperties":{"description":"","oneOf":[{"$ref":"typeschema:ArrayType"},{"$ref":"typeschema:BooleanType"},{"$ref":"typeschema:NumberType"},{"$ref":"typeschema:IntegerType"},{"$ref":"typeschema:StringType"},{"$ref":"typeschema:AnyType"},{"$ref":"typeschema:IntersectionType"},{"$ref":"typeschema:UnionType"},{"$ref":"typeschema:ReferenceType"},{"$ref":"typeschema:GenericType"}]},"maxProperties":{"description":"Positive integer value","type":"integer"},"minProperties":{"description":"Positive integer value","type":"integer"}}},"typeschema:NumberType":{"description":"Represents a number type","$extends":"typeschema:ScalarType","type":"object","properties":{"type":{"description":"","type":"string"},"maximum":{"description":"","type":"number"},"minimum":{"description":"","type":"number"}}},"typeschema:ReferenceType":{"description":"Represents a reference type. A reference type points to a specific type at the definitions map","type":"object","properties":{"$ref":{"description":"Reference to a type under the definitions map","type":"string"},"$template":{"description":"Optional concrete type definitions which replace generic template types","type":"object","additionalProperties":{"type":"string"}}}},"typeschema:ScalarType":{"description":"Represents a scalar type","$extends":"typeschema:CommonType","type":"object","properties":{"format":{"description":"Describes the specific format of this type i.e. date-time or int64","type":"string"},"enum":{"description":"","type":"array","items":{"oneOf":[{"type":"string"},{"type":"number"}]}}}},"typeschema:StringType":{"description":"Represents a string type","$extends":"typeschema:ScalarType","type":"object","properties":{"type":{"description":"","type":"string"},"maxLength":{"description":"Positive integer value","type":"integer","minimum":0},"minLength":{"description":"Positive integer value","type":"integer","minimum":0},"pattern":{"description":"","type":"string"}}},"typeschema:StructType":{"description":"Represents a struct type. A struct type contains a fix set of defined properties","$extends":"typeschema:CommonType","type":"object","properties":{"$final":{"description":"Indicates that a struct is final, this means it is not possible to extend this struct","type":"boolean"},"$extends":{"description":"Extends an existing type with the referenced type","type":"string"},"type":{"description":"","type":"string"},"properties":{"description":"","type":"object","additionalProperties":{"oneOf":[{"$ref":"typeschema:MapType"},{"$ref":"typeschema:ArrayType"},{"$ref":"typeschema:BooleanType"},{"$ref":"typeschema:NumberType"},{"$ref":"typeschema:IntegerType"},{"$ref":"typeschema:StringType"},{"$ref":"typeschema:AnyType"},{"$ref":"typeschema:IntersectionType"},{"$ref":"typeschema:UnionType"},{"$ref":"typeschema:ReferenceType"},{"$ref":"typeschema:GenericType"}]}},"required":{"description":"","type":"array","items":{"type":"string"}}}},"typeschema:TypeSchema":{"description":"The root TypeSchema","type":"object","properties":{"$import":{"description":"Contains external definitions which are imported. The imported schemas can be used via the namespace i.e. 'my_namespace:my_type'","type":"object","additionalProperties":{"type":"string"}},"definitions":{"description":"","type":"object","additionalProperties":{"oneOf":[{"$ref":"typeschema:StructType"},{"$ref":"typeschema:MapType"},{"$ref":"typeschema:ReferenceType"}]}},"$ref":{"description":"Reference to a root schema under the definitions key","type":"string"}}},"typeschema:UnionType":{"description":"Represents an union type. An union type can contain one of the provided types","type":"object","properties":{"description":{"description":"","type":"string"},"discriminator":{"description":"","$ref":"typeschema:Discriminator"},"oneOf":{"description":"Contains an array of references. The reference must only point to a struct type","type":"array","items":{"oneOf":[{"$ref":"typeschema:BooleanType"},{"$ref":"typeschema:NumberType"},{"$ref":"typeschema:IntegerType"},{"$ref":"typeschema:StringType"},{"$ref":"typeschema:ReferenceType"}]}}}}}},"typehub/typeschema":{"operations":[],"definitions":{"AnyType":{"description":"Represents an any type","$extends":"CommonType","type":"object","properties":{"type":{"description":"","type":"string"}}},"ArrayType":{"description":"Represents an array type. An array type contains an ordered list of a specific type","$extends":"CommonType","type":"object","properties":{"type":{"description":"","type":"string"},"items":{"description":"","oneOf":[{"$ref":"BooleanType"},{"$ref":"NumberType"},{"$ref":"IntegerType"},{"$ref":"StringType"},{"$ref":"AnyType"},{"$ref":"ReferenceType"},{"$ref":"GenericType"}]},"maxItems":{"description":"Positive integer value","type":"integer"},"minItems":{"description":"Positive integer value","type":"integer"}}},"BooleanType":{"description":"Represents a boolean type","$extends":"ScalarType","type":"object","properties":{"type":{"description":"","type":"string"}}},"CommonType":{"description":"Represents a base type. Every type extends from this common type and shares the defined properties","type":"object","properties":{"description":{"description":"General description of this type, should not contain any new lines.","type":"string"},"type":{"description":"Type of the property","type":"string"},"nullable":{"description":"Indicates whether it is possible to use a null value","type":"boolean"},"deprecated":{"description":"Indicates whether this type is deprecated","type":"boolean"},"readonly":{"description":"Indicates whether this type is readonly","type":"boolean"}}},"Discriminator":{"description":"Adds support for polymorphism. The discriminator is an object name that is used to differentiate between other schemas which may satisfy the payload description","type":"object","properties":{"propertyName":{"description":"The name of the property in the payload that will hold the discriminator value","type":"string"},"mapping":{"description":"An object to hold mappings between payload values and schema names or references","type":"object","additionalProperties":{"type":"string"}}}},"GenericType":{"description":"Represents a generic type. A generic type can be used i.e. at a map or array which then can be replaced on reference via the $template keyword","type":"object","properties":{"$generic":{"description":"","type":"string"}}},"IntegerType":{"description":"Represents an integer type","$extends":"NumberType","type":"object","properties":{"type":{"description":"","type":"string"}}},"IntersectionType":{"description":"Represents an intersection type","type":"object","properties":{"description":{"description":"","type":"string"},"allOf":{"description":"Contains an array of references. The reference must only point to a struct type","type":"array","items":{"$ref":"ReferenceType"}}}},"MapType":{"description":"Represents a map type. A map type contains variable key value entries of a specific type","$extends":"CommonType","type":"object","properties":{"type":{"description":"","type":"string"},"additionalProperties":{"description":"","oneOf":[{"$ref":"ArrayType"},{"$ref":"BooleanType"},{"$ref":"NumberType"},{"$ref":"IntegerType"},{"$ref":"StringType"},{"$ref":"AnyType"},{"$ref":"IntersectionType"},{"$ref":"UnionType"},{"$ref":"ReferenceType"},{"$ref":"GenericType"}]},"maxProperties":{"description":"Positive integer value","type":"integer"},"minProperties":{"description":"Positive integer value","type":"integer"}}},"NumberType":{"description":"Represents a number type","$extends":"ScalarType","type":"object","properties":{"type":{"description":"","type":"string"},"maximum":{"description":"","type":"number"},"minimum":{"description":"","type":"number"}}},"ReferenceType":{"description":"Represents a reference type. A reference type points to a specific type at the definitions map","type":"object","properties":{"$ref":{"description":"Reference to a type under the definitions map","type":"string"},"$template":{"description":"Optional concrete type definitions which replace generic template types","type":"object","additionalProperties":{"type":"string"}}}},"ScalarType":{"description":"Represents a scalar type","$extends":"CommonType","type":"object","properties":{"format":{"description":"Describes the specific format of this type i.e. date-time or int64","type":"string"},"enum":{"description":"","type":"array","items":{"oneOf":[{"type":"string"},{"type":"number"}]}}}},"StringType":{"description":"Represents a string type","$extends":"ScalarType","type":"object","properties":{"type":{"description":"","type":"string"},"maxLength":{"description":"Positive integer value","type":"integer","minimum":0},"minLength":{"description":"Positive integer value","type":"integer","minimum":0},"pattern":{"description":"","type":"string"}}},"StructType":{"description":"Represents a struct type. A struct type contains a fix set of defined properties","$extends":"CommonType","type":"object","properties":{"$final":{"description":"Indicates that a struct is final, this means it is not possible to extend this struct","type":"boolean"},"$extends":{"description":"Extends an existing type with the referenced type","type":"string"},"type":{"description":"","type":"string"},"properties":{"description":"","type":"object","additionalProperties":{"oneOf":[{"$ref":"MapType"},{"$ref":"ArrayType"},{"$ref":"BooleanType"},{"$ref":"NumberType"},{"$ref":"IntegerType"},{"$ref":"StringType"},{"$ref":"AnyType"},{"$ref":"IntersectionType"},{"$ref":"UnionType"},{"$ref":"ReferenceType"},{"$ref":"GenericType"}]}},"required":{"description":"","type":"array","items":{"type":"string"}}}},"TypeSchema":{"description":"The root TypeSchema","type":"object","properties":{"$import":{"description":"Contains external definitions which are imported. The imported schemas can be used via the namespace i.e. 'my_namespace:my_type'","type":"object","additionalProperties":{"type":"string"}},"definitions":{"description":"","type":"object","additionalProperties":{"oneOf":[{"$ref":"StructType"},{"$ref":"MapType"},{"$ref":"ReferenceType"}]}},"$ref":{"description":"Reference to a root schema under the definitions key","type":"string"}}},"UnionType":{"description":"Represents an union type. An union type can contain one of the provided types","type":"object","properties":{"description":{"description":"","type":"string"},"discriminator":{"description":"","$ref":"Discriminator"},"oneOf":{"description":"Contains an array of references. The reference must only point to a struct type","type":"array","items":{"oneOf":[{"$ref":"BooleanType"},{"$ref":"NumberType"},{"$ref":"IntegerType"},{"$ref":"StringType"},{"$ref":"ReferenceType"}]}}}}}}}